'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

/*
  This is the easiest way, for this use case, to detect if we're running in
  Node.js or in a browser environment. In other cases, this won't be even a
  problem as Rollup will provide the correct polyfill in the bundle.
  The main advantage by doing it this way is that it allows to easily test
  the code running in both environments, by overriding `global.window` in
  the specific test.
*/
var isBrowser = function isBrowser() {
  return typeof window !== 'undefined' && window.document && window.document.nodeType === 9;
};

function getSystemInfo() {
  if (isBrowser()) return window.navigator.userAgent;
  var nodeVersion = process.version.slice(1);
  var platformInfo = "(".concat(process.platform, "; ").concat(process.arch, ")");
  return "Node.js/".concat(nodeVersion, " ").concat(platformInfo);
}

function createUserAgent(options) {
  if (!options || Object.keys(options).length === 0 || !{}.hasOwnProperty.call(options, 'name')) throw new Error('Missing required option `name`'); // Main info

  var baseInfo = options.version ? "".concat(options.name, "/").concat(options.version) : options.name; // Library info

  var libraryInfo = null;
  if (options.libraryName && !options.libraryVersion) libraryInfo = options.libraryName;else if (options.libraryName && options.libraryVersion) libraryInfo = "".concat(options.libraryName, "/").concat(options.libraryVersion); // Contact info

  var contactInfo = null;
  if (options.contactUrl && !options.contactEmail) contactInfo = "(+".concat(options.contactUrl, ")");else if (!options.contactUrl && options.contactEmail) contactInfo = "(+".concat(options.contactEmail, ")");else if (options.contactUrl && options.contactEmail) contactInfo = "(+".concat(options.contactUrl, "; +").concat(options.contactEmail, ")"); // System info

  var systemInfo = getSystemInfo();
  return [baseInfo, systemInfo, libraryInfo, contactInfo].filter(Boolean).join(' ');
}

function createUserAgentMiddleware(options) {
  var userAgent = createUserAgent(_objectSpread2({
    name: 'commercetools-js-sdk'
  }, options));
  return function (next) {
    return function (request, response) {
      var requestWithUserAgent = _objectSpread2({}, request, {
        headers: _objectSpread2({}, request.headers, {
          'User-Agent': userAgent
        })
      });

      next(requestWithUserAgent, response);
    };
  };
}

exports.createUserAgentMiddleware = createUserAgentMiddleware;
